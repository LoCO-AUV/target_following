#!/usr/bin/env python
PACKAGE = "target_tracking_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("flat_lin_vel_kp",    double_t,    0, "Proportional", 1.0,  0, 10)
gen.add("flat_lin_vel_ki",    double_t,    0, "Integral",    .0,   0, 10)
gen.add("flat_lin_vel_deriv_prediction_dt",    double_t,    0, "Derivative prediction time interval",  0.,   0, 1)
gen.add("flat_lin_vel_max_deriv_noise_gain",    double_t,    0, "Max derivative noise gain",  1.0,   0, 10)
gen.add("flat_lin_vel_manual_deriv_filter_weights",  bool_t,    0, "Manually tune the weights of the deriv filter",  False)
gen.add("flat_lin_vel_alpha",    double_t,    0, "Weight on the previous derivative estimate in filtering",  0.5,   0, 1)

gen.add("flat_ang_vel_kp",    double_t,    0, "Proportional", 0.5,  0, 10)
gen.add("flat_ang_vel_ki",    double_t,    0, "Integral",    .0,   0, 10)
gen.add("flat_ang_vel_deriv_prediction_dt",    double_t,    0, "Derivative prediction time interval",  0.7,   0, 1)
gen.add("flat_ang_vel_max_deriv_noise_gain",    double_t,    0, "Max derivative noise gain",  1.0,   0, 10)
gen.add("flat_ang_vel_manual_deriv_filter_weights",  bool_t,    0, "Manually tune the weights of the deriv filter",  False)
gen.add("flat_ang_vel_alpha",    double_t,    0, "Weight on the previous derivative estimate in filtering",  0.5,   0, 1)

gen.add("flat_z_kp",    double_t,    0, "Proportional", 3.0,  0, 10)
gen.add("flat_z_ki",    double_t,    0, "Integral",    .0,   0, 10)
gen.add("flat_z_deriv_prediction_dt",    double_t,    0, "Derivative prediction time interval",  0.05,   0, 1)
gen.add("flat_z_max_deriv_noise_gain",    double_t,    0, "Max derivative noise gain",  1.0,   0, 10)
gen.add("flat_z_manual_deriv_filter_weights",  bool_t,    0, "Manually tune the weights of the deriv filter",  False)
gen.add("flat_z_alpha",    double_t,    0, "Weight on the previous derivative estimate in filtering",  0.5,   0, 1)



gen.add("knifeedge_lin_vel_kp",    double_t,    0, "Proportional", 1.0,  0, 10)
gen.add("knifeedge_lin_vel_ki",    double_t,    0, "Integral",    .0,   0, 10)
gen.add("knifeedge_lin_vel_deriv_prediction_dt",    double_t,    0, "Derivative prediction time interval",  0.,   0, 1)
gen.add("knifeedge_lin_vel_max_deriv_noise_gain",    double_t,    0, "Max derivative noise gain",  1.0,   0, 10)
gen.add("knifeedge_lin_vel_manual_deriv_filter_weights",  bool_t,    0, "Manually tune the weights of the deriv filter",  False)
gen.add("knifeedge_lin_vel_alpha",    double_t,    0, "Weight on the previous derivative estimate in filtering",  0.5,   0, 1)

gen.add("knifeedge_ang_vel_kp",    double_t,    0, "Proportional", 0.5,  0, 10)
gen.add("knifeedge_ang_vel_ki",    double_t,    0, "Integral",    .0,   0, 10)
gen.add("knifeedge_ang_vel_deriv_prediction_dt",    double_t,    0, "Derivative prediction time interval",  0.7,   0, 1)
gen.add("knifeedge_ang_vel_max_deriv_noise_gain",    double_t,    0, "Max derivative noise gain",  1.0,   0, 10)
gen.add("knifeedge_ang_vel_manual_deriv_filter_weights",  bool_t,    0, "Manually tune the weights of the deriv filter",  False)
gen.add("knifeedge_ang_vel_alpha",    double_t,    0, "Weight on the previous derivative estimate in filtering",  0.5,   0, 1)

gen.add("knifeedge_z_kp",    double_t,    0, "Proportional", 3.0,  0, 10)
gen.add("knifeedge_z_ki",    double_t,    0, "Integral",    .0,   0, 10)
gen.add("knifeedge_z_deriv_prediction_dt",    double_t,    0, "Derivative prediction time interval",  0.05,   0, 1)
gen.add("knifeedge_z_max_deriv_noise_gain",    double_t,    0, "Max derivative noise gain",  1.0,   0, 10)
gen.add("knifeedge_z_manual_deriv_filter_weights",  bool_t,    0, "Manually tune the weights of the deriv filter",  False)
gen.add("knifeedge_z_alpha",    double_t,    0, "Weight on the previous derivative estimate in filtering",  0.5,   0, 1)


gen.add("depth_exp_filtering_weight_of_previous",  double_t, 0,
        "Weight on the previous estimate of the filtered depth",  0., 0, 1)

gen.add("deadzone_abs_yaw_error",  double_t, 0,
        "Yaw errors in this interval around zero will be ignored",  0.03, 0, 0.5)

gen.add("deadzone_abs_depth_error",  double_t, 0,
        "Depth errors in this interval around zero will be ignored",  0.05, 0, 0.5)

gen.add("target_bbox_image_ratio",  double_t, 0,
        "If the bbox area in the image is bigger than this, forward error will be ignored",  0.6, 0.2, 1)

exit(gen.generate(PACKAGE, "target_tracking_controller", "BBoxControllerParams"))
